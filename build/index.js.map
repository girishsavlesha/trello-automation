{"version":3,"sources":["../src/index.js"],"names":["app","port","process","env","PORT","use","express","json","urlencoded","spreadsheetId","devs","get","req","res","send","post","next","actionType","body","action","type","listAfterID","data","listAfter","id","translationKey","display","cardID","card","memberCreator","fullName","trelloConfig","donelistID","auth","google","GoogleAuth","keyFile","scopes","getClient","client","googleSheets","sheets","version","then","spreadsheets","values","append","range","valueInputOption","resource","url","Math","floor","random","length","e","console","log","listen"],"mappings":"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","sourcesContent":["import {} from \"dotenv/config\";\r\nimport getCards from \"../trello-api/getCards\";\r\nimport express from \"express\";\r\nimport trelloConfig from \"../trello-config\";\r\nimport { google } from \"googleapis\";\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 7000;\r\napp.use(express.json()); // to support JSON-encoded bodies\r\napp.use(express.urlencoded()); // to support URL-encoded bodies\r\n\r\nconst spreadsheetId = \"1dLzAa8TZHd6LhmzgX99NhHIcTGgwvqop0-3fNpNPtuw\";\r\n\r\nconst devs = ['nikhila','riya','deepansh','kushang']\r\n\r\napp.get(\"/\", async (req, res) => {\r\n  res.send(\"This is server for automated trello\");\r\n});\r\n\r\napp.post(\"/\", async(req, res, next) => {\r\n  const actionType = req.body.action.type;\r\n  const listAfterID = req.body.action.data.listAfter ? req.body.action.data.listAfter.id : null;\r\n  const translationKey = req.body.action.display.translationKey;\r\n  const cardID = req.body.action.data.card.id || null;\r\n  const memberCreator = req.body.action.memberCreator.fullName;\r\n\r\n  if (\r\n    actionType == \"updateCard\" && listAfterID && listAfterID == trelloConfig.donelistID &&\r\n    translationKey == \"action_move_card_from_list_to_list\" && cardID\r\n  ) {\r\n    const auth = new google.auth.GoogleAuth({\r\n        keyFile: \"google-credentials.json\",\r\n        scopes: \"https://www.googleapis.com/auth/spreadsheets\",\r\n      });\r\n    \r\n      const client = await auth.getClient();\r\n\r\n      const googleSheets =  google.sheets({ version: \"v4\", auth: client });\r\n      getCards(cardID).then(data => {\r\n        googleSheets.spreadsheets.values.append({\r\n            auth,\r\n            spreadsheetId,\r\n            range: \"Sheet1!A:C\",\r\n            valueInputOption: \"USER_ENTERED\",\r\n            resource: {\r\n                values: [\r\n                    [data.url, memberCreator, devs[Math.floor(Math.random() * devs.length)]]\r\n                ]\r\n            }\r\n        })\r\n      }).catch(e => console.log(e))\r\n  }\r\n}),\r\n  app.listen(port, () => {\r\n    console.log(`app is running at http://localhost:${port}`);\r\n  });\r\n\r\n"],"file":"index.js"}